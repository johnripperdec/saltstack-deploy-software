user  {{USER}} {{GROUP}};
worker_processes {{ grains['num_cpus'] }};
{% if grains['num_cpus'] == 2 %}  
worker_cpu_affinity 01 10;  
{% elif grains['num_cpus'] == 4 %}  
worker_cpu_affinity 1000 0100 0010 0001;  
{% elif grains['num_cpus'] >= 8 %}  
worker_cpu_affinity 00000001 00000010 00000100 00001000 00010000 00100000 01000000 10000000;  
{% else %}  
worker_cpu_affinity 01;  
{% endif %} 
error_log  {{LOG_ROOT}}/nginx_error.log  crit;
pid        /usr/local/nginx/logs/nginx.pid;
#Specifies the value for maximum file descriptors that can be opened by this process.
worker_rlimit_nofile {{MAX_OPEN_FILE}};
events
	{
		use epoll;
		worker_connections {{MAX_OPEN_FILE}};
		#multi_accept on;
	}

http
	{
include       mime.types; 
 default_type  application/octet-stream; 
 charset  utf-8;  
 server_names_hash_bucket_size 128;  
 client_header_buffer_size 32k; 
 large_client_header_buffers 4 32k; 
# client_max_body_size 8m; 
 sendfile on; 
 tcp_nopush     on; 
 keepalive_timeout 120;  
 fastcgi_connect_timeout 400;  
 fastcgi_send_timeout 400;  
 fastcgi_read_timeout 400; 
 fastcgi_buffer_size 64k;  
 fastcgi_buffers 4 64k;  
 fastcgi_busy_buffers_size 128k; 
 fastcgi_temp_file_write_size 128k; 
 tcp_nodelay on;  
 gzip on; 
 gzip_min_length  1k; 
 gzip_buffers     4 16k; 
 gzip_http_version 1.0; 
 gzip_comp_level 2;
 gzip_types       text/plain application/x-javascript text/css application/xml; 
 gzip_vary on; 
 server_tokens off;
client_max_body_size 512m;   #允许客户端请求的最大单个文件字节数
client_body_buffer_size 128k;  #缓冲区代理缓冲用户端请求的最大字节数
proxy_connect_timeout  600;   #跟后端服务器连接超时时间，发起握手等候响应超时时间
proxy_read_timeout   600;   #连接成功后，等候后端服务器响应时间，在后端排队中等候
proxy_send_timeout 600; #后端服务器数据回传时间，就是在规定时间内后端服务器必须传完有数
proxy_buffer_size 16k; #代理请求缓存区，这个缓存区间会保存用户的信息以供nginx进行则处理，一般只要能保存下头信息即可
proxy_buffers 4 32k; #同上，告诉nginx保存单个用的几个Buffer最大用多大空间
proxy_busy_buffers_size 64k; #如果系统很忙可以申请用的几个更大的proxy_buffer
proxy_temp_file_write_size 64k; #缓存临时文件大小
proxy_cache_path /home/fastdfs/proxy_cache levels=1:2 
	keys_zone=http-cache:200m max_size=1g inactive=30d;
    proxy_temp_path /home/fastdfs/tmp;
    #group1的服务设置  
    upstream fdfs_group1 {  
         server 10.10.24.71:8888 weight=1 max_fails=2 fail_timeout=30s;  
    }
    #group2的服务设置  
    upstream fdfs_group2 {  
         server 10.10.24.71:8888 weight=1 max_fails=2 fail_timeout=30s;  
    }
	
    server {
        listen       8000;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;
		#group1的负载均衡配置  
        location /group1/M00 {  
            proxy_next_upstream http_502 http_504 error timeout invalid_header;  
            proxy_cache http-cache;  
            proxy_cache_valid 200 304 12h;  
            proxy_cache_key $uri$is_args$args;  
            #对应group1的服务设置  
            proxy_pass http://fdfs_group1;  
            expires 30d;  
        }
        location /group2/M00 {  
            proxy_next_upstream http_502 http_504 error timeout invalid_header;  
            proxy_cache http-cache;  
            proxy_cache_valid 200 304 12h;  
            proxy_cache_key $uri$is_args$args;  
            #对应group2的服务设置  
            proxy_pass http://fdfs_group2;  
            expires 30d;  
         }
        location ~/purge(/.*) {  
            allow 127.0.0.1;  
            allow 10.10.24.0/24;  
            deny all;  
            proxy_cache_purge http-cache $1$is_args$args;  
        } 		 
        location / {
            root   html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        #location ~ /\.ht {
        #    deny  all;
        #}
    }

#log format
log_format  access  '$remote_addr - $remote_user [$time_local] "$request" '
    '$status $body_bytes_sent "$http_referer" '
    '"$http_user_agent" $http_x_forwarded_for '
    '"$upstream_addr" "$upstream_status" "$upstream_response_time" "$request_time"';
access_log /usr/local/nginx/logs/access.log access;


include vhost/*.conf;
}

